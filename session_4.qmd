---
filters:
  - naquiz
format:
  html:
    toc: true
    toc-location: left
    toc-title: "In this session:"
---

# Session 4: Putting it all together

In this session we will combine all the skills we have learned so far to perform a complete analysis of a small dataset.

::: {.callout-tip title="Learning Objectives"}
At the end of this session, learners should be able to:

1.  Describe the key steps in data analysis (exploration, manipulating and plotting)

2.  Understand how pivot and join functions can be used to reshape and combine entire data frames
:::

## Introduction to the dataset

In this session we will use the `mousezempic_dosage_data` and `mousezempic_expression_data` data frames, which contain information about the mice and their gene expression levels, respectively.

```{r}
#| eval: false
dir.create("data") # create data directory if it doesn't exist
download.file("https://raw.githubusercontent.com/kzeglinski/new_wehi_r_course/refs/heads/main/data/mousezempic_expression_data.tsv", "data/mousezempic_expression_data.tsv") # download data
```

```{r}
#| message: false
library(tidyverse)

# read in dosage data
mousezempic_dosage_data <- read_csv("data/mousezempic_dosage_data.csv")
mousezempic_dosage_data
```

```{r}
#| message: false

# read in expression data
mousezempic_expression_data <- read_tsv("data/mousezempic_expression_data.tsv")
mousezempic_expression_data
```

::: callout-note
We have used `read_csv()` for the mouse data and `read_tsv()` for the expression data. These are for reading data separated by commas and tab characters respectively. The `readr` package also provides `read_delim()` to let the package guess your delimiter, but if you know the format of your file then it's good practice to use the appropriate reading function for more predictable behaviour.
:::

::: callout-caution
There's nothing stopping someone from naming a file `file.csv` while having tab-separated data inside. This happens quite often in real-world data so it's a good idea to have a quick look at the data in an text editor before reading it in.
:::

## Tidy Data

The tidyverse revolves around an important concept called "[tidy data](https://r4ds.hadley.nz/data-tidy.html)". This is a specific representation of tabular data that is considered easy to work with. Tidy data is roughly defined as tabular data that contains:

1.  Individual variables in columns
2.  Individual observations in rows
3.  One data value in each cell

Having individual variables in columns makes then accessible for performing tidyverse operations like `select()`, `mutate()`, `filter()` and `arrange()`. If variables were not stored as columns then these functions would not be able to access them by name.

Having individual observations in rows is important because it associates all variables of each observation with the same row. If the data from one observation is spread across multiple rows then it is easy to incorrect summaries from the `summarise()` function. When using the `filter()` function with tidy data, you can expect to keep all the data for an observation or none at all. When the data for observations is split over different rows, it's possible to unknowingly lose partial data from observations.

Having a single value in each cell makes it possible to perform meaningful computations for the values, for example you cannot take a `mean()` of a column of values that contain multiple different values.

Although tidy data is the easiest to work with, it's often necessary to alter the format of your data for plotting or table displays. It's a good idea to keep your core data in a tidy format and treating plot or table outputs as representations of that tidy data.

::: callout-note
Most data you encounter will not be tidy, the first part of data analysis is usually called "data-wranging" and involves tidying up your data so it is easier to use for downstream analysis.
:::

## Reshaping and combining data {#sec-reshaping}

The `filter()`, `select()`, `mutate()` and `summarise()` functions we learned last session all operate along either the columns or the rows of data. Combining these operations cleverly can answer the majority of questions about your data. However, there are two useful families of functions: `pivot` for reshaping your data and `join` for combining your data from shared columns.

### Reshaping data with pivot functions {#sec-pivot}

Pivoting is a way to change the shape of your tibble.

- Pivoting longer reshapes the data to transfer data stored in columns into rows, resulting in more rows and fewer columns. 

- Pivoting wider is the reverse, moving data from rows into columns.

![Pivot functions allow you to change the structure of your data frame](images/S02F10_pivot.png){width="50%"}

The `pivot_longer()` function is used to pivot data from wide to long format, and the `pivot_wider()` function is used to pivot data from long to wide format.

#### Pivot wider

A common use case for `pivot_wider()` is to make a [contingency table](https://en.wikipedia.org/wiki/Contingency_table), which shows the number of observations for each combination of two variables. This is often easier to read than the same information in long format.

For example, let's say we want to create a table that shows how many mice there are of each strain, in each cage number. We can achieve this in a long format using `summarise()` as we learned in the previous section:

```{r}
mousezempic_dosage_data %>%
  summarise(
    n_mice = n(),
    .by = c(cage_number, mouse_strain))
```

For the specific task of counting, we can achieve the same effect using the `count()` tidyverse function.

```{r}
mousezempic_dosage_data %>%
  count(cage_number, mouse_strain, name = "n_mice")
```

This summarises by each combination of `cage_number` and `mouse_strain`, with the `n()` function giving the count of data belonging to that combination.

To get a contingency table, we wish to have the information in the `mouse_strain` column displayed along the column names and the values of `n_mice` becoming the values of the cells in the new table. Since the goal is to make the table wider, we use the `pivot_wider()` function. To achieve this, we instruct the `pivot_wider()` function to take names from the `mouse_strain` column and the values from the `n_mice` column.

```{r}
mousezempic_dosage_data %>%
  count(cage_number, mouse_strain, name = "n_mice") %>%
  pivot_wider(names_from = mouse_strain, values_from = n_mice)
```

This has transformed our data into a contingency table, with `NA` where no data corresponding data exists for the specific `cage_number` and `mouse_strain` combination.

We can do the same thing to see how many of each mouse strains is in each of our experiment replicates.

```{r}
mousezempic_dosage_data %>%
  count(replicate, mouse_strain, name = "n_mice") %>%
  pivot_wider(names_from = mouse_strain, values_from = n_mice)
```

#### Pivot longer

Data can often arrive in the form similar to the contingency table we constructed. Although this data is easy to read, it is difficult to operate on using tidyverse functions because the `mouse_strain` data is now stored in the column names and not inside a column we can use as a variable. In order to make this kind of data tidy, we use the `pivot_longer()` function, which will create a pair of columns from the column names and the value of the corresponding cell.

To demonstrate `pivot_longer()`, we will use the `mousezempic_expression_data` that we downloaded earlier. This data frame contains the expression levels of two genes (TH and PRLH) suspected to be upregulated in mice taking MouseZempic, as well as one housekeeping gene (HPRT1), all measured in triplicate.

```{r}
mousezempic_expression_data
```

The data is currently in wide format, with each row representing a different mouse (identified by its `id_num`) and each column representing a different measurement of a gene. To reshape this data into a long format (where each measurement is contained on a separate row), we can use `pivot_longer()`, specifying three arguments:

1.  `cols`: the columns to pivot from. You can use selection helpers like `contains()` or `starts_with()` to easily select multiple columns at once.
2.  `names_to`: the name of a new column that will contain the original column names.
3.  `values_to`: the name of a new column that will contain the values from the original columns.

In this particular case here's what the code would look like:

```{r}
mousezempic_expr_long <- mousezempic_expression_data %>%
  pivot_longer(
    cols = contains("_rep"),
    names_to = "measurement",
    values_to = "expression_level"
  )

mousezempic_expr_long
```

Let's go through those three arguments:

1.  `cols = contains("_rep")`: This tells R to pivot all columns that contain the string `"_rep"`. In this case, that's the columns `TH_rep1`, `TH_rep2`, `TH_rep3`, `PRLH_rep1`, `PRLH_rep2`, `PRLH_rep3`, `HPRT1_rep1`, `HPRT1_rep2`, and `HPRT1_rep3`.
2.  `names_to = "measurement"`: This tells R to create a new column called 'measurement' that contains the names of the old columns. So, for example, the value of the 'measurement' column for the first row will be 'TH_rep1'.
3.  `values_to = "expression_level"`: This tells R to create a new column called 'expression_level' that contains the values from the old columns. So, for example, the value of the 'expression_level' column for the first row will be the value of the `TH_rep1` column.

After running this code, you'll see that the data frame is now in long format, with each row representing a different measurement of a gene for a different mouse.

```{r}
ggplot(mousezempic_expr_long, aes(x = measurement, y = expression_level, fill = group)) +
  geom_col(position = "dodge") +
  theme(legend.position = "bottom") +
  labs(
    fill = "Group",
    x = "Gene",
    y = "Expression Level"
  ) +
  scale_y_log10()
```

::: {.callout-note title="Perplexed by pivoting?"}
Pivoting can be a bit tricky to get your head around! Often when you're doing analysis, you'll run into the problem of knowing that you need to pivot, but not knowing exactly what arguments to use. In these cases, it can be helpful to look at examples online, [like those in the R for Data Science book](https://r4ds.hadley.nz/data-tidy.html#sec-pivoting).
:::

### Separating data in a column

```{r}
mousezempic_expr_long %>%
  separate(measurement, into = c("gene", "replicate"), sep = "_") %>%
  ggplot(aes(x = gene, y = expression_level, fill = group)) +
  geom_col(position = "dodge") +
  theme(legend.position = "bottom") +
  labs(
    fill = "Group",
    x = "Gene",
    y = "Expression Level"
  )
```

### Combining data with join functions {#sec-join}

Data analysis typically involves multiple tables of data. Often there will be tables that are contain related information that must be combined to answer the questions you're interested in. Tables that are related to each other tend to have one or more columns in common, and are referred to as "relational data". Combining relational data in useful ways requires the `join` family of functions. In general joins can accomplish two tasks

-   Add new variables to an existing table containing additional information.
-   Filter observations in one table based on whether or not they match observations in another table.
-   Both of the above at the same time.

![The left_join() function allows you to combine two data frames](images/S02F11_left_join.png)

A common and basic join is the `left_join()`. It takes two data frame as arguments and optionally a vector of common columns to perform the join on. The reason it's called a left-join because it retains all rows from the left data frame while adding on columns from the right data frame only when the data in the designed joining column(s) match.

For example, we can join the `mousezempic_dosage_data` data frame with the `mousezempic_expression_data` data frame based on the `id_num` column, which is common to both data frames:

```{r}
left_join(mousezempic_dosage_data, mousezempic_expression_data, by = "id_num")
```

The `mousezempic_dosage_data` contains information about characteristics of each mouse, while the `mousempic_expression_data` contains the gene expressions of the mice. Each data frame has an `id_num` column that relates the data from the two data frames together, and we have joined them into one table that contains both the data about the mice as well as the expression of their genes.

With the `left_join()`, if there is a `id_num` value that exists in the right data frame but not found in the left, then that data will not be present in the joined table. For any `id_num` that appears only in the left but not the right data frame, the values in the newly created columns will be `NA`.

::: callout-caution
If the values from the left data frame matches to multiple rows of the column in the right data frame, the `left_join()` will duplicate the data from the left data frame for each match to the right. This can cause issues with downstream summarisation if not carefully considered.
:::

#### Joining with mismatched column names

Often the column containing the matching information has different names in different data frames. For example what might be called "id_num" in one data frame could also be called "mouse_id" in another data frame. In those cases the `by` argument of `left_join()` can be formatted to let the function know which column in the left data frame matches to which column on the right.

We will demonstrate this by renaming the `id_num` column in the `mousezempic_dosage_data` to `mouse_id` and using it to perform the join instead. We will use the `join_by(mouse_id == id_num)` helper function for the `by` argument to specify the different columns we wish to join by.

```{r}
# rename id_num to mouse_id
mz_dosage_data_new <- mousezempic_dosage_data %>%
  rename(mouse_id = id_num)

mz_dosage_data_new
```

```{r}
# perform left join by matching mouse_id of the left data frame to id_num of the right data frame
mz_joined_data <- left_join(
  mz_dosage_data_new, mousezempic_expression_data,
  by = join_by(mouse_id == id_num)
) %>%
  drop_na() # keep only rows without NA

mz_joined_data
```

::: callout-note
When joining data frames with mismatched column names, the column name from the left data frame argument will be retained for the joined result.
:::

::: callout-note
An older syntax exists for the `by` argument that would look like `by = c("mouse_id" = "id_num")`. This does the same thing as what is shown above but the documentation now recommends the new syntax which allows for flexible options like joining to the closest.
:::

## Visualising the data

The first plot we will make is to visualise the relationship between the mousezempic drug dosage and the amount of weight loss.

```{r}
mz_joined_data %>%
  ggplot(aes(x = drug_dose_g, y = weight_lost_g)) +
  geom_point() +
  geom_smooth(method = "lm")
```

We see that there is a positive correlation between dosage and weight loss. Since we also have data about the mouse strain we can colour our plot using `mouse_strain` to observe if there's any particular effect.

```{r}
mz_joined_data %>%
  ggplot(aes(x = drug_dose_g, y = weight_lost_g, col = mouse_strain)) +
  geom_point() +
  geom_smooth(method = "lm")
```

We can also visualise the distribution of weight loss in each strain.

```{r}
mz_joined_data %>%
  ggplot(aes(x = mouse_strain, y = weight_lost_g, fill = mouse_strain)) +
  geom_violin()
```

### Accounting for confounding factors

We see that the Black 6 mice have higher weight loss, but two confounding factors come to mind: the Black 6 mice have higher drug doses, and may be larger to begin with. So first let's check if the Black 6 mice are indeed larger.

```{r}
mz_joined_data %>%
  ggplot(aes(x = mouse_strain, y = initial_weight_g, fill = mouse_strain)) +
  geom_violin()
```

We see that the Black 6 mice had similar initial weight as the BALB mice, both of which tended to be heavier than the CD-1 mice. So we want to try to account for that by considering the relative change in weight, and additionally account for the relative change in weight per unit dosage. To do this we will need to create two new columns in our data frame.

```{r}
mz_joined_data <- mz_joined_data %>%
  mutate(
    weight_loss_proportion = weight_lost_g / initial_weight_g,
    weight_loss_proportion_per_dosage_g = weight_loss_proportion / drug_dose_g 
  )

mz_joined_data
```

With that data we can assess whether or not the drug works more effectively on one strain than the other.

```{r}
ggplot(mz_joined_data, aes(x = mouse_strain, y = weight_loss_proportion_per_dosage_g)) +
  geom_violin(aes(fill = mouse_strain))
```

We can further check if the results are consistent across replicates as well as between sexes by using faceting on `replicate` and `sex` as the rows and columns.

```{r}
ggplot(mz_joined_data, aes(x = mouse_strain, y = weight_loss_proportion_per_dosage_g)) +
  geom_violin(aes(fill = mouse_strain)) +
  facet_grid(rows = vars(replicate), cols = vars(sex))
```

With this we can feel reasonably confident that the doseage and initial weight adjusted weight loss is roughly equal in Black 6 and CD-1 mice while being lower in BALB/c mice. For the final presentation of such a result we might want to rescale the dosage to milligrams, change theme and label the axis more naturally.

```{r}
mz_joined_data %>%
  mutate(weight_loss_proportion_per_dosage_mg = weight_loss_proportion_per_dosage_g / 1000) %>%
  mutate(
    mouse_strain = case_when(
      mouse_strain == "Black 6" ~ "C57BL/6",
      mouse_strain == "BALB C" ~ "BALB/c",
      mouse_strain == "CD-1" ~ "CD-1"
    )
  ) %>%
  ggplot(aes(x = mouse_strain, y = weight_loss_proportion_per_dosage_mg)) +
  geom_violin(aes(fill = mouse_strain)) +
  scale_y_continuous(labels = scales::percent) +
  labs(
    x = "Mouse Strain",
    y = "Weight Loss per Mousezempic doseage (%/mg)",
    title = "Dosage-adjusted percentage weight loss per strain",
    fill = "Mouse Strain"
  ) +
  theme_classic(base_size = 14)
```

## Exploring gene expression

After our analysis of the dosage and weight loss characteristics of the mice, we next want to have a look at their gene expression. The first thing we might want to see is the relationship between the mousezempic dosage and the Th gene. However we immediately see a problem as the Th gene expression is stored in 3 separate columns as a result of technical replicates.

```{r}
mz_joined_data %>%
  select(mouse_id, drug_dose_g, contains("Th_rep"))
```

To make a scatter plot we're going to need all our gene expression values in a single column, given that we currently have the data in 3 columns, we will have to perform a `pivot_longer()` operation to reduce the number of columns while increasing the number of rows. The columns we wish to pivot longer are those corresponding to the repeated measurements of the Th gene and we want to store these column names in column named `measurement`.

Once the pivot has be performed, the `measurement` column will contains two values, that of the gene and the replicate. We can separate these values into individua columns using `separate()`.

```{r}
# pivot longer then separate measurement column into genes and replicate
th_expr_data <- mz_joined_data %>%
  select(mouse_id, drug_dose_g, contains("Th_rep")) %>%
  pivot_longer(cols = contains("Th_rep"), names_to = "measurement", values_to = "expression") %>%
  separate(measurement, into = c("gene", "replicate"), sep = "_")

th_expr_data
```

Seeing how the technical replicates appear to have a wide value of measurements for each mouse, for the technical replicates we will combine their values using `summarise()` by `mouse_id` to take mean expression across the three replicates.

```{r}
th_expr_data %>%
  summarise(
    expression = mean(expression),
    .by = c(drug_dose_g, mouse_id)
  ) %>%
  ggplot(aes(x = drug_dose_g, y = expression)) +
  geom_point() +
  geom_smooth(method = "lm")
```

## Another case study - WHO tuberculosis data

We can look at another dataset containing tuberculosis (TB) cases broken down by year, country, age, gender, and diagnosis method. The data comes from the [2014 World Health Organization Global Tuberculosis Report](https://www.who.int/teams/global-tuberculosis-programme/data) and is typical of many real-life datasets in terms of structure. There are redundant columns, odd variable codes and missing values.

We want to tidy it up using the tools we have learned in order to try to extract some information from this data.

```{r}
who
```

The first thing we notice is that `country`, `iso2` and `iso3` all seem to be different encodings for the country. The `year` column is fine as a variable but the rest of the columns seem appear to be coding values in the column names. There are numeric values in the cells, and since we know this dataset is supposed to contain case numbers, and no column clearly denotes this, we suspect that the values in the columns are case numbers with the column names being descriptive of the cases.

Since we believe that many of these column names are in fact encoding data, we want to `pivot_longer()` to put that information in a column for further processing.

```{r}
# pivot longer with columns 5 to 60, drop NA values
who_longer <- who %>%
  pivot_longer(
    cols = 5:60, # alternatively contains("_")
    names_to = "description",
    values_to = "cases",
    values_drop_na = TRUE
  )

who_longer
```

It doesn't look like the values in `description` are unique, so we can try to count them to get a sense of what we're dealing with. It will show us the unique values as well as the counts for each value.

```{r}
who_longer %>%
  count(description)
```

Some patterns emerge, and it maybe be possible to guess at exactly what these values mean. For example we see the presence of "m" and "f" in the encoding which probably encodes sex. Luckily we have a data dictionary ready from the source that tells us what this means.

1.  The first part tells us if the data is new or old, in this case all data is new.
2.  The next part describe the type of TB:

-   `rel` for relapse
-   `ep` for extrapulmonary
-   `sn` for pulmonary TB that cannot be diagnosed with a pulmonary smear (smear negative)
-   `sp` for pulmonary TB that can be diagnosed with a smear (smear positive)

3.  The sex of the patient. Males and females denoted by `m` and `f` respectively.
4.  The 7 age groups the data is divided into:

-   `014`: 0 - 14 years old
-   `1524`: 15 - 24 years old
-   `2534`: 25 - 34 years old
-   `3544`: 35 - 44 years old
-   `4554`: 45 - 54 years old
-   `5564`: 55 - 64 years old
-   `65`: 65 or older

### String manupulation

Armed with that knowledge we can begin to tidy up our dataset! The first thing we will do is tidy up the `description` column, we will do this with some string manipulation functions from the tidyverse. These functions help us manipulate strings programatically and are essential in dealing with real-world data.

Some useful functions for string manipulation include:

- `str_replace(string, pattern, replacement)`: replaces the pattern in the string with the replacement.
- `str_extract(string, pattern)`: extracts the part of the string matching the pattern.
- `str_remove(string, pattern)`: removes the part of the string matching the pattern.

The full list of functions can be found in the [stringr package documentation](https://stringr.tidyverse.org/reference/index.html) and patterns can be written in very powerful ways with [regular expressions](https://r4ds.had.co.nz/strings.html#matching-patterns-with-regular-expressions). For our purposes we will just use simply fixed patterns.

We saw previously that we can use `separate()` to break apart on column into multiple columns. However, we see there is a problem in this dataset where the cases that are marked as relapse are encoded `newrel` which doesn't leave us with a separator to use. We can remedy this by using a combination of `mutate()` and `str_replace()` to replace all instances of `newrel` with `new_rel`.

```{r}
who_longer <- who_longer %>%
  mutate(description = str_replace(description, "newrel", "new_rel"))

who_longer
```

Since every single observation contains only new cases and no old cases, the `new_` portion of the encoding is redundant. So we can remove it using `str_remove()`.

```{r}
who_longer <- who_longer %>%
  mutate(description = str_remove(description, "new_"))

who_longer
```

Now one last problem remains, there is no separator between the sex and age group. So we can once again use `str_replace()` to edit in an underscore. Note that we use `"_f"` and `"_m"` as our patterns as a precaution in case the letters naturally occur elsewhere in the encoding.

```{r}
who_longer <- who_longer %>%
  mutate(description = str_replace(description, "_f", "_f_")) %>%
  mutate(description = str_replace(description, "_m", "_m_"))

who_longer
```

With that we are finally able to separate the data into individual columns with `separate()`.

```{r}
who_separated <- who_longer %>%
  separate(description, into = c("type", "sex", "age_group"), sep = "_")

who_separated
```

Because the columns `iso2` and `iso3` contain redundant information about the country, we can remove them, but also retain them for reference as we may want to know what the short forms of the countries are when relating it other tables. To do so we can `select()` the columns containing this information, then use `distinct()` to keep only unique rows.

```{r}
country_codes <- who_separated %>%
  select(country, iso2, iso3) %>%
  distinct()

country_codes
```

With that we can safely remove the redundant information from our data and end up with a tidy data frame.

```{r}
who_tidy <- who_separated %>%
  select(-iso2, -iso3)

who_tidy
```

From there we can easily visualise various aspects of the data for analysis. For example we can see what country had the highest number of total cases in the year 2010.

```{r}
who_tidy %>%
  filter(year == 2010) %>%
  summarise(total_cases = sum(cases), .by = country) %>%
  arrange(desc(total_cases))
```

We can extract only the data from the top 10 countries based in 2010 cases and plot how their total case numbers between the years 2000 and 2010.

```{r}
top_10_countries <- who_tidy %>%
  filter(year == 2010) %>%
  summarise(total_cases = sum(cases), .by = country) %>%
  arrange(desc(total_cases)) %>%
  slice(1:10)

top_10_countries
```

```{r}
who_tidy %>%
  filter(
    country %in% top_10_countries$country,
    year >= 2000,
    year <= 2010
  ) %>%
  summarise(
    total_cases = sum(cases), .by = c(country, year)
  ) %>%
  ggplot(aes(x = year, y = total_cases, col = country)) +
  geom_point() +
  geom_line()
```


<!-- :::::::::::::::::::: {.callout-important title="Practice exercises"} -->
<!-- Try these practice questions to test your understanding -->

<!-- :::::::: question -->
<!-- 1\. What does the following code do? -->

<!-- ```{r} -->
<!-- #| eval: false -->
<!-- mousezempic_dosage_data %>% -->
<!--   summarise( -->
<!--     med_tail = median(tail_length_mm, na.rm = TRUE), -->
<!--     .by = c(mouse_strain, sex)) %>% -->
<!--   pivot_wider(names_from = sex, values_from = med_tail) -->
<!-- ``` -->

<!-- ::::::: choices -->
<!-- ::: choice -->
<!-- Pivots data into a wide format where there is a column for each sex. -->
<!-- ::: -->

<!-- ::: {.choice .correct-choice} -->
<!-- Calculates the median tail length for each unique combination of `mouse_strain` and `sex` in the `mousezempic_dosage_data` data frame, then pivots into a wide format where there is a column for each sex. -->
<!-- ::: -->

<!-- ::: choice -->
<!-- Calculates the median tail length for each unique combination of `mouse_strain` and `sex` in the `mousezempic_dosage_data` data frame, then pivots into a wide format where there is a column for each mouse strain. -->
<!-- ::: -->

<!-- ::: choice -->
<!-- It just gives an error -->
<!-- ::: -->
<!-- ::::::: -->
<!-- :::::::: -->

<!-- 2\. I have run the following code to create a new column in the `mousezempic_dosage_data` data frame that gives the weight of the mice at the end of the experiment. -->

<!-- ```{r} -->
<!-- mousezempic_dosage_data %>% -->
<!--   # add a column for the weight at the end of the experiment -->
<!--   mutate(final_weight_g = initial_weight_g - weight_lost_g) %>% -->
<!--   # select the relevant columns only -->
<!--   select(id_num, initial_weight_g, final_weight_g) -->
<!-- ``` -->

<!-- Which pivot function call would I use to take this data from a wide format (where there is a column for the final and initial weight) to a long format (where there is a row for each mouse and each weight measurement)? -->

<!-- ::::::: choices -->
<!-- ::: choice -->
<!-- `pivot_longer(cols = c(initial_weight_g, final_weight_g), names_to = "weight", values_to = "timepoint")` -->
<!-- ::: -->

<!-- ::: choice -->
<!-- `pivot_longer(cols = c(id_num, final_weight_g), names_to = "timepoint", values_to = "initial_weight_g")` -->
<!-- ::: -->

<!-- ::: choice -->
<!-- `pivot_wider(names_from = initial_weight_g, values_from = final_weight_g)` -->
<!-- ::: -->

<!-- ::: {.choice .correct-choice} -->
<!-- `pivot_longer(cols = c(initial_weight_g, final_weight_g), names_to = "timepoint", values_to = "weight")` -->
<!-- ::: -->
<!-- ::::::: -->

<!-- :::::::: question -->
<!-- 3\. Which of the following is NOT a valid way to join the `mousezempic_dosage_data` data frame with the `mousezempic_expression_data` data frame based on the `id_num` column? -->

<!-- ::::::: choices -->
<!-- ::: choice -->
<!-- `mousezempic_dosage_data %>% left_join(mousezempic_expression_data, by = "id_num")` -->
<!-- ::: -->

<!-- ::: choice -->
<!-- `left_join(mousezempic_dosage_data, mousezempic_expression_data, by = "id_num")` -->
<!-- ::: -->

<!-- ::: {.choice .correct-choice} -->
<!-- `mousezempic_dosage_data %>% left_join(mousezempic_expression_data, .by = "id_num")` -->
<!-- ::: -->

<!-- ::: choice -->
<!-- `mousezempic_dosage_data %>% left_join(mousezempic_expression_data, by = ("id_num" = "id_num"))` -->
<!-- ::: -->
<!-- ::::::: -->
<!-- :::::::: -->

<!-- <details> -->

<!-- <summary>Solutions</summary> -->

<!-- 1\. The code first calculates the median tail length for each unique combination of `mouse_strain` and `sex` in the `mousezempic_dosage_data` data frame, then pivots the data into a wide format where there is a column for each sex in the dataset (because of the argument `names_from = sex` ) -->

<!-- 2\. The correct pivot function call to take the data from a wide format to a long format is `pivot_longer(cols = c(initial_weight_g, final_weight_g), names_to = "timepoint", values_to = "weight")`. This code tells R to pivot the `initial_weight_g` and `final_weight_g` columns into a long format, where there is a row for each mouse and each weight measurement. The `names_to` argument specifies to make a column called 'timepoint' that tells us whether the measurement is initial or final, and the `values_to` argument specifies the name of the new column that will contain these measurements. -->

<!-- 3\. The line of code that is NOT a valid way to join the `mousezempic_dosage_data` data frame with the `mousezempic_expression_data` data frame based on the `id_num` column is `mousezempic_dosage_data %>% left_join(mousezempic_expression_data, .by = "id_num")`. This line of code is incorrect because the `.by` argument is not used in the `left_join()` function (this can be confusing! it's `.by` when grouping by `by` when joining). The other options are valid ways to join the two data frames based on the `id_num` column: remember that we don't have to use pipes to join data frames, we can use the `left_join()` function directly, and we can use a named vector to specify the columns to join on (although here it's a bit redundant as the columns have the same name). -->

<!-- </details> -->
<!-- :::::::::::::::::::: -->

<!-- summary - Reshaping data with `pivot_longer()` and `pivot_wider()` to change the structure of your data frame. -->

<!-- -   Combining data with `left_join()` to merge two data frames based on a common column. -->

<!-- questions etc -->

<!-- 4.  Using the `mousezempic_dosage_data` data frame, write R code to: -->

<!--     a.  Make a data frame that shows the number of mice of each strain, in each replicate. -->
<!--     b.  Pivot this data frame into a wide format to create a contingency table. -->
<!--     c.  Pivot the wide data frame from (b) back into a long format. -->

<!-- 5.  Let's say I have two data frames, `df1` and `df2`, that I want to join based a shared 'key' column, that is called 'key' in `df1` and 'item_key' in `df2`. Write R code to join these two data frames using the `left_join()` function. -->

<!-- solutions -->

<!-- 4.  Here's how you could write R code to achieve the tasks: -->

<!--     a.  `mousezempic_dosage_data %>% summarise(n_mice = n(), .by = c(mouse_strain, replicate))` -->
<!--     b.  `mousezempic_dosage_data %>% summarise(n_mice = n(), .by = c(mouse_strain, replicate)) %>% pivot_wider(names_from = replicate, values_from = n_mice)` -->
<!--     c.  `mousezempic_dosage_data %>% summarise(n_mice = n(), .by = c(mouse_strain, replicate)) %>% pivot_wider(names_from = replicate, values_from = n_mice) %>% pivot_longer(cols = starts_with("rep"), names_to = "replicate", values_to = "n_mice")` -->

<!-- 5.  To join the two data frames you could use `df1 %>% left_join(df2, by = c("key" = "item_key"))` (with pipe) or `left_join(df1, df2, by = c("key" = "item_key"))` (without pipe). -->
