---
filters:
  - naquiz
format:
  html:
    toc: true
    toc-location: left
    toc-title: "In this session:"
---

# Session 4: Putting it all together

In this session we will combine all the skills we have learned so far to perform a complete analysis of a (small) dataset

::: {.callout-tip title="Learning Objectives"}
At the end of this session, learners should be able to:

1.  Describe the key steps in data analysis (exploration, manipulating and plotting)

2.  Understand how pivot and join functions can be used to reshape and combine entire data frames


:::
## Introduction to the dataset

In this session we will use the `mousezempic_dosage_data` and `mousezempic_expression_data` data frames, which contain information about the mice and their gene expression levels, respectively.
i was thinking of editing the ID column in the mousezempic_expression_data data frame so that they have to use stringr, then use that to join them together.

the expression data frame has measurements of three genes (2 ozempic related and 1 housekeeping). I scaled them so that you could use the housekeeping gene to normalise the other two genes (if we want to)

```{r}
#| eval: false
dir.create("data") # create data directory if it doesn't exist
download.file("https://raw.githubusercontent.com/kzeglinski/new_wehi_r_course/refs/heads/main/data/mousezempic_expression_data.tsv", "data/mousezempic_expression_data.tsv") # download data
```

```{r}
#| message: false
library(tidyverse)

# read in dosage data
mousezempic_dosage_data <- read_csv("data/mousezempic_dosage_data.csv")
mousezempic_dosage_data
```

```{r}
#| message: false

# read in expression data
mousezempic_expression_data <- read_tsv("data/mousezempic_expression_data.tsv")
mousezempic_expression_data
```

::: {.callout-note}
We have used `read_csv()` for the mouse data and `read_tsv()` for the expression data. These are for reading data separated by commas and tab characters respectively. The `readr` package also provides `read_delim()` to let the package guess your delimiter, but if you know the format of your file then it's good practice to use the appropriate reading function for more predictable behaviour.
:::

::: {.callout-caution}
There's nothing stopping someone from naming a file `file.csv` while having tab-separated data inside. This happens quite often in real-world data so it's a good idea to have a quick look at the data in an text editor before reading it in.
:::

## Tidy Data

The tidyverse revolves around an important concept called "tidy data". This is a specific representation of tabular data that is considered easy to work with. Tidy data is roughly defined as tabular data that contains:

1. Individual variables in columns
2. Individual observations in rows
3. One data value in each cell

Having individual variables in columns makes then accessible for performing tidyverse operations like `select()`, `mutate()`, `filter()` and `arrange()`. If variables were not stored as columns then these functions would not be able to access them by name.

Having individual observations in rows is important because it associates all variables of each observation with the same row. If the data from one observation is spread across multiple rows then it is easy to incorrect summaries from the `summarise()` function. When using the `filter()` function with tidy data, you can expect to keep all the data for an observation or none at all. When the data for observations is split over different rows, it's possible to unknowingly lose partial data from observations.

Having a single value in each cell makes it possible to perform meaningful computations for the values, for example you cannot take a `mean()` of a column of values that contain multiple different values.

Although tidy data is the easiest to work with, it's often necessary to alter the format of your data for plotting or table displays. It's a good idea to keep your core data in a tidy format and treating plot or table outputs as representations of that tidy data.

## Reshaping and combining data {#sec-reshaping}

The `filter()`, `select()`, `mutate()` and `summarise()` functions we learned last session all operate along either the columns or the rows of data. Combining these operations cleverly can answer the majority of questions about your data. However, there are two useful families of functions: `pivot` for reshaping your data and `join` for combining your data from shared columns.

### Reshaping data with pivot functions {#sec-pivot}

Pivoting is a way to change the structure of your data frame by rotating it so that rows become columns and vice versa. This can be useful when you want to change the way your data is organised, for example, to make it easier to plot or analyse.

![Pivot functions allow you to change the structure of your data frame](images/S02F10_pivot.png){width=50%}

The `pivot_longer()` function is used to pivot data from wide to long format, and the `pivot_wider()` function is used to pivot data from long to wide format.

#### Pivot wider
A common use case for `pivot_wider()` is to make a [contingency table](https://en.wikipedia.org/wiki/Contingency_table),
which shows the number of observations for each combination of two variables. This is often easier to read than the same information in long format.

For example, let's say we want to create a table that shows how many mice there are of each strain, in each cage number. We can achieve this in a long format using `summarise()` as we learned in the previous section:

```{r}
mousezempic_dosage_data %>%
  summarise(
    n_mice = n(),
    .by = c(cage_number, mouse_strain))
```

Notice how we have a row for each unique combination of `cage_number` and `mouse_strain`. Instead, we can use `pivot_wider()` to create a table where each row represents a unique `cage_number` and each column represents a unique `mouse_strain`.

To use a `pivot_wider()` you need to tell R two bits of information:

1. What the new columns should be (with `names_from`)
2. Where the values in these columns should come from (with `values_from`).

In this case, we want the mouse strains to be our new columns (so `names_from = mouse_strain`), and the average weight lost to be the values in the table (`values_from = n_mice`). Putting it all together, here is the code to make our summary table:

```{r}
mousezempic_dosage_data %>%
  summarise(
    n_mice = n(),
    .by = c(cage_number, mouse_strain)) %>%
  pivot_wider(names_from = mouse_strain, values_from = n_mice)
```
Notice how `NA` values are used where there is no data for a particular combination of `cage_number` and `mouse_strain`.

#### Pivot longer
While wide data can be easier to read, long data is often easier to work with. That's because a lot of the tidyverse functions we've learned so far (like `filter()`, `mutate()`, and `summarise()`) work in a row-wise fashion, which is more natural with long data.

To demonstrate `pivot_longer()`, we will introduce a new data frame called `mousezempic_expression_data`. This data frame contains the expression levels of two genes (TH and PRLH) suspected to be upregulated in mice taking MouseZempic, as well as one housekeeping gene (HPRT1), all measured in triplicate. You can download it here:

{{< downloadthis data/mousezempic_expression_data.tsv dname=mousezempic_expression_data label="Download mousezempic_expression_data.tsv" icon=file-earmark-arrow-down type=primary class=data-button id=expr_data >}}

Or run the following code in your R console to download it:


Once you've done that, read it into R (notice that it's a `.tsv` file, so we need to use either `read_tsv()` or `read_delim()`, not `read_csv()`)



As you can see, the data is in wide format, with each row representing a different mouse (identified by its `id_num`) and each column representing a different measurement of a gene. To put this data into a long format (where each measurement is contained on a separate row), we can use `pivot_longer()`, specifying three arguments:

1. `cols`: the columns to pivot from. You can use selection helpers like `contains()` or `starts_with()` to easily select multiple columns at once.
2. `names_to`: the name of a new column that will contain the old column names.
3. `values_to`: the name of a new column that will contain the values from the old columns.

In this particular case here's what the code would look like:

```{r}
mousezempic_expression_data %>%
  pivot_longer(cols = contains("_rep"), names_to = "measurement", values_to = "expression_level")
```

Let's go through those three arguments:

1. `cols = contains("_rep")`: This tells R to pivot all columns that contain the string "_rep". In this case, that's the columns `TH_rep1`, `TH_rep2`, `TH_rep3`, `PRLH_rep1`, `PRLH_rep2`, `PRLH_rep3`, `HPRT1_rep1`, `HPRT1_rep2`, and `HPRT1_rep3`.
2. `names_to = "measurement"`: This tells R to create a new column called 'measurement' that contains the names of the old columns. So, for example, the value of the 'measurement' column for the first row will be 'TH_rep1'.
3. `values_to = "expression_level"`: This tells R to create a new column called 'expression_level' that contains the values from the old columns. So, for example, the value of the 'expression_level' column for the first row will be the value of the `TH_rep1` column.

After running this code, you'll see that the data frame is now in long format, with each row representing a different measurement of a gene for a different mouse.

::: {.callout-note title="Perplexed by pivoting?"}
Pivoting can be a bit tricky to get your head around! Often when you're doing analysis, you'll run into the problem of knowing that you need to pivot, but not knowing exactly what arguments to use. In these cases, it can be helpful to look at examples online, [like those in the R for Data Science book](https://r4ds.hadley.nz/data-tidy.html#sec-pivoting), or to just experiment with different arguments until you get the result you want.
:::

### Combining data with join functions {#sec-join}
Another way you might need to change the structure of your data is by combining it with other data frames. This is where the `join` functions come in. There are many different types of joins in `dplyr` (which you can read about here if you're interested), but the most useful one is the `left_join()` function.

![The left_join() function allows you to combine two data frames](images/S02F11_left_join.png)

`left_join()` is used to combine two data frames based on a common column. It takes three arguments - the first data frame, the second data frame, and the common column to join on. The reason it's called a 'left join' is because it keeps all the rows from the first data frame (the 'left' data frame), and only adds rows from the second data frame (the 'right' data frame) if they match the common column.

For example, we can join the `mousezempic_dosage_data` data frame with the `mousezempic_expression_data` data frame based on the `id_num` column, which is common to both data frames:

```{r}
# example of using it in a pipe
# here mousezempic_dosage_data is the left data frame (first) data frame passed on by the pipe
mousezempic_dosage_data %>%
  left_join(mousezempic_expression_data, by = "id_num")
```

This code will return a new data frame that contains all the columns from `mousezempic_dosage_data` and all the columns from `mousezempic_expression_data`, with the rows matched based on the `id_num` column. If there is no match for a particular `id_num` in the `mousezempic_expression_data` data frame, the columns from that data frame will be filled with `NA`. Rows that only appear in the `mousezempic_expression_data` data frame will not be included in the final data frame.

We can also use `left_join()` when our columns have different names (but contain the same value) using a named vector the format `c("name1" = "name2")`, where 'name1' is the name of the column in the left/first data frame (the one being piped in) and 'name2' is the name of the corresponding column in the right/second data frame.

For example, if the `id_num` column in the `mousezempic_dosage_data` data frame was called `mouse_id` instead, we could still join the two data frames using the following code:

```{r}
mousezempic_dosage_data %>%
  # for the sake of this example, make a new column called mouse_id
  mutate(mouse_id = id_num) %>%
  # join the two data frames where mouse_id in the first data frame matches id_num in the second data frame
  left_join(mousezempic_expression_data, by = c("mouse_id" = "id_num"))
```

::: {.callout-important title="Practice exercises"}
Try these practice questions to test your understanding

::: question
1\. What does the following code do?

```{r}
#| eval: false
mousezempic_dosage_data %>%
  summarise(
    med_tail = median(tail_length_mm, na.rm = TRUE),
    .by = c(mouse_strain, sex)) %>%
  pivot_wider(names_from = sex, values_from = med_tail)
```


::: choices
::: choice
Pivots data into a wide format where there is a column for each sex.
:::

::: {.choice .correct-choice}
Calculates the median tail length for each unique combination of `mouse_strain` and `sex` in the `mousezempic_dosage_data` data frame, then pivots into a wide format where there is a column for each sex.
:::

::: choice
Calculates the median tail length for each unique combination of `mouse_strain` and `sex` in the `mousezempic_dosage_data` data frame, then pivots into a wide format where there is a column for each mouse strain.
:::

::: choice
It just gives an error
:::

:::
:::

2\. I have run the following code to create a new column in the `mousezempic_dosage_data` data frame that gives the weight of the mice at the end of the experiment.

```{r}
mousezempic_dosage_data %>%
  # add a column for the weight at the end of the experiment
  mutate(final_weight_g = initial_weight_g - weight_lost_g) %>%
  # select the relevant columns only
  select(id_num, initial_weight_g, final_weight_g)
```
Which pivot function call would I use to take this data from a wide format (where there is a column for the final and initial weight) to a long format (where there is a row for each mouse and each weight measurement)?

::: choices
::: choice
`pivot_longer(cols = c(initial_weight_g, final_weight_g), names_to = "weight", values_to = "timepoint")`
:::

::: choice
`pivot_longer(cols = c(id_num, final_weight_g), names_to = "timepoint", values_to = "initial_weight_g")`
:::

::: choice
`pivot_wider(names_from = initial_weight_g, values_from = final_weight_g)`
:::

::: {.choice .correct-choice}
`pivot_longer(cols = c(initial_weight_g, final_weight_g), names_to = "timepoint", values_to = "weight")`
:::
:::

::: question
3\. Which of the following is NOT a valid way to join the `mousezempic_dosage_data` data frame with the `mousezempic_expression_data` data frame based on the `id_num` column?

::: choices
::: choice
`mousezempic_dosage_data %>% left_join(mousezempic_expression_data, by = "id_num")`
:::
::: choice
`left_join(mousezempic_dosage_data, mousezempic_expression_data, by = "id_num")`
:::
::: {.choice .correct-choice}
`mousezempic_dosage_data %>% left_join(mousezempic_expression_data, .by = "id_num")`
:::
::: choice
`mousezempic_dosage_data %>% left_join(mousezempic_expression_data, by = ("id_num" = "id_num"))`
:::
:::
:::

<details> <summary>Solutions</summary>
1\. The code first calculates the median tail length for each unique combination of `mouse_strain` and `sex` in the `mousezempic_dosage_data` data frame, then pivots the data into a wide format where there is a column for each sex in the dataset (because of the argument `names_from = sex` )

2\. The correct pivot function call to take the data from a wide format to a long format is `pivot_longer(cols = c(initial_weight_g, final_weight_g), names_to = "timepoint", values_to = "weight")`. This code tells R to pivot the `initial_weight_g` and `final_weight_g` columns into a long format, where there is a row for each mouse and each weight measurement. The `names_to` argument specifies to make a column called 'timepoint' that tells us whether the measurement is initial or final, and the `values_to` argument specifies the name of the new column that will contain these measurements.

3\. The line of code that is NOT a valid way to join the `mousezempic_dosage_data` data frame with the `mousezempic_expression_data` data frame based on the `id_num` column is `mousezempic_dosage_data %>% left_join(mousezempic_expression_data, .by = "id_num")`. This line of code is incorrect because the `.by` argument is not used in the `left_join()` function (this can be confusing! it's `.by` when grouping by `by` when joining). The other options are valid ways to join the two data frames based on the `id_num` column: remember that we don't have to use pipes to join data frames, we can use the `left_join()` function directly, and we can use a named vector to specify the columns to join on (although here it's a bit redundant as the columns have the same name).

</details>

:::

## Visualising the data

finally we will make some nice visualisations


summary
-   Reshaping data with `pivot_longer()` and `pivot_wider()` to change the structure of your data frame.

-   Combining data with `left_join()` to merge two data frames based on a common column.

questions etc

4.  Using the `mousezempic_dosage_data` data frame, write R code to:

      a.  Make a data frame that shows the number of mice of each strain, in each replicate.
      b.  Pivot this data frame into a wide format to create a contingency table.
      c.  Pivot the wide data frame from (b) back into a long format.

5.  Let's say I have two data frames, `df1` and `df2`, that I want to join based a shared 'key' column, that is called 'key' in `df1` and 'item_key' in `df2`. Write R code to join these two data frames using the `left_join()` function.

solutions

4. Here's how you could write R code to achieve the tasks:

    a.  `mousezempic_dosage_data %>% summarise(n_mice = n(), .by = c(mouse_strain, replicate))`
    b.  `mousezempic_dosage_data %>% summarise(n_mice = n(), .by = c(mouse_strain, replicate)) %>% pivot_wider(names_from = replicate, values_from = n_mice)`
    c.  `mousezempic_dosage_data %>% summarise(n_mice = n(), .by = c(mouse_strain, replicate)) %>% pivot_wider(names_from = replicate, values_from = n_mice) %>% pivot_longer(cols = starts_with("rep"), names_to = "replicate", values_to = "n_mice")`

5. To join the two data frames you could use `df1 %>% left_join(df2, by = c("key" = "item_key"))` (with pipe) or `left_join(df1, df2, by = c("key" = "item_key"))` (without pipe).
