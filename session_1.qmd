---
filters:
  - naquiz
format:
  html:
    toc: true
    toc-location: left
    toc-title: "In this session:"
---

# Session 1: Introduction to R {#sec-session01}

::: {.callout-tip title="Learning Objectives"}
1.  Use RStudio to create an R project and R script

2.  Perform basic mathematical operations, comparisons and function calls in R

3.  Store the results of analysis in variables

4.  Describe the different data types and data structures used in R

5.  Recall how to use RStudio to find data files and read them in as data frames
:::

## Using RStudio {#sec-usingRstudio}

### What is R and RStudio? {#sec-whatIsR}

**R** is a free and popular statistical programming language, great for performing data analysis. **RStudio** is a free [integrated development environment (IDE)](https://en.wikipedia.org/wiki/Integrated_development_environment) which is a program that makes it easier for us to write code. During this course, we will learn how to use RStudio's handy features like projects (which help us to keep track of different analyses) and the environment panel (which shows us all of our data/variables in one place).

### Creating a project {#sec-creatingProject}

Projects are a way we can organise our work in RStudio, so that we can resume where we left off and keep different analyses separate. Any time you start working on something new (like this course!) it is recommended that you start a new project. You can see the current project you're working on, switch between projects or create a new project using the menu in the top right hand corner of RStudio:

![In the top right hand corner of RStudio, you can see all of your projects](images/S01F01_make_project.png)

To begin this course, let's make a new project. We'll do this in a new directory (folder) so that everything stays organised:

![We usually want to make a new project in its own directory (folder)](images/S01F02_make_project.png)

Next, we need to tell R that we want to make a 'New Project' and not any of the other fancy things we could create:

![There are many types of projects we can make in R, but for now we'll stick with a regular project.](images/S01F03_make_project.png)

Finally, we need to give our project an informative name:

![Choose a name that will help you remember what this project is about!](images/S01F04_make_project.png)

::: {.callout-note title="Name with underscores, not spaces"}
You'll notice I named my project using an underscore (R_course) rather than a space (R course). **In general, when coding we want to name things without spaces**, so that it is clear to the computer that we are talking about a single entity (the 'R_course') as opposed to multiple things ('R' and 'course'). We'll revisit this idea later in the session in @sec-variables
:::

### Creating an R script {#sec-createRScript}

Now that our project is set up, we need to create a file to write our code in:

![How to create a new R Script](images/S01F05_new_script.png)

This file is called an **R Script**. Don't forget to save your R Script as you work so you don't lose your progress! You can do this through the file menu or by using the keyboard shortcut {{< kbd Cmd+S >}}.

### Overview of the RStudio layout

At this point, your RStudio window should look like this, with four different panels visible:

![The four panels of RStudio](images/S01F06_panels.png)

This is what they're used for:

1.  **The R Script panel.** This is a text document where you can write code, and run it by highlighting the code or putting your cursor on that line, then pressing the 'run' button in the top-right corner or using the {{< kbd Cmd+Enter >}} keyboard shortcut.

2.  **The console.** This is where the output (results) of your code will appear. You can also run code in the console, by typing it next to the `>` symbol and pressing {{< kbd Enter >}} but it's better to use the R Script, as the code you write there is saved and acts as a record of your work.

3.  **The environment panel.** This is where the data and variables you use in your analysis will be listed. More on this later.

4.  **The files/plot/help panel.**

    -   Under the 'files' tab you can see the files in your current folder

    -   Under the 'plots' tab you can view the plots you have created

    -   Under the 'help' tab you can read manual pages to learn how to use functions

Although there are other tabs for some of these panels, they are used for more niche things out of scope of this course.

### Writing our first piece of code

Now we are ready to write our bit of code! We'll start with one of the most important concepts in programming: comments. Comments are lines of our script that begin with `#` and they are ignored by the computer: they are just notes that we write to ourselves. It's really important to write 'well-commented' code, with plenty of comments that clearly explain what your code is doing, so that your script can easily be understood by whoever looks at it next (whether this is someone else or you revisiting an analysis many months later!)

::: {.callout-warning title="Don't forget your #"}
If you forget the `#` at the start of your comment, R will try to interpret your notes as actual code, and you'll get an error message:

```{r}
#| error: true
oops I forgot the hashtag
```
:::

During this course, we will practice writing well-commented code, but here is an example of how we could write comments to explain the code for one plus one:

```{r}
#| eval: false
# calculate one plus one
1 + 1 # the + symbol means plus
```

## Practicing R code with maths {#sec-maths}

To practice running R code, let's do some maths. Here's how to code some basic mathematical operations in R:

| Operation      | Code | Example                                                          |
|---------------|---------------|-------------------------------------------|
| Brackets       | `()` | sixteen divided by the result of three minus one: `16 / (3 - 1)` |
| Exponents      | `^`  | three squared: `3 ^ 2`                                           |
| Division       | `/`  | ten divided by 3: `10 / 3`                                       |
| Multiplication | `*`  | eight times 4: `8 * 4`                                           |
| Addition       | `+`  | one plus one: `1 + 1`                                            |
| Subtraction    | `-`  | two minus ten: `2 - 10`                                          |

Like in regular maths, R follows the order of operations. Here, the `3 + 2` in the brackets will be evaluated first, and then result will be multiplied by 7.

```{r}
# brackets evaluate first
(3 + 2) * 7
```

You might notice when running this code that before the output (result), there is a number one that looks like this: `[1]`. This relates to the length of our output, which here is just one single number (hence the `1`). Later in the session we will write code with longer output, and the purpose of this number will become clearer, but you can ignore it for now.

::: {.callout-note title="Using whitespace in code"}
Above we used spaces between the numbers and mathematical operators in our code. R understands code without spaces too, but this makes it easier to read. Note that this is different to when we are naming things, when spaces are bad!

```{r}
# spaces don't matter in code
3 ^ 2
# so both of these should give the same result
3^2
```
:::

::: {.callout-important title="Practice exercises"}
Try these practice questions to test your understanding

::: question
1\. Which R expression would give me a result of 10?

::: choices
::: {.choice .correct-choice}
`(2 * 3) + (2 ^ 2)`
:::

::: choice
`(5 - 3) * 4`
:::

::: choice
`1 + 1`
:::

::: choice
`20 - 1`
:::
:::
:::

::: question
2\. What would be the result of running this line of R code: `# test 1+1`

::: choices
::: choice
1
:::

::: choice
2
:::

::: choice
An error
:::

::: {.choice .correct-choice}
Nothing
:::
:::
:::

<details>

<summary>Solutions</summary>

<p>

1.  `(2 * 3) + (2 ^ 2)` is equal to 10. If you're not sure, try copy-pasting this code into the console and running it! The best way to learn is by doing.

2.  The code `# test 1+1` is a comment, because it starts with a `#`. This means R ignores it: if you run this code, you won't see any output in the console.

</p>

</details>
:::

## Comparisons {#sec-comparisons}

R can perform comparisons, using the following notation:

| Comparison                    | Code         |
|-------------------------------|--------------|
| Equal to                      | `==`         |
| Not equal to                  | `!=`         |
| Greater/less than             | `>` or `<`   |
| Greater/less than or equal to | `>=` or `<=` |

::: {.callout-warning title="Mind your equal signs!"}
Be careful to use double equal signs `==` when checking for equality. If you use only one, you'll get an error:

```{r}
#| error: true
1 == 1 # this is TRUE
1 = 1 # this gives an error
```
:::

Comparisons in R return either `TRUE` or `FALSE`:

```{r}
10 > 10 # gives FALSE
10 >= 10 # gives TRUE
```

You can also negate the result of a comparison or any TRUE/FALSE value by using the `!` operator before the expression.

```{r}
# gives FALSE (i.e. not TRUE)
!TRUE

# gives TRUE: 1 is not equal to 2, but we've negated the result
!(1 == 2)
```

This is really useful for filtering data, which we will cover in [Session @sec-session02]

::: {.callout-important title="Practice exercises"}
Try these practice questions to test your understanding

::: question
1\. What would be the result of running this R code: `10 >= 10`

::: choices
::: choice
10
:::

::: choice
`FALSE`
:::

::: {.choice .correct-choice}
`TRUE`
:::

::: choice
An error
:::
:::
:::

::: question
2\. Which of the following R expressions would give me a result of `FALSE`?

::: choices
::: choice
`1 == 1`
:::

::: choice
`1 != (3 - 4) * 1`
:::

::: choice
`1 = 10`
:::

::: {.choice .correct-choice}
`1 == 2`
:::
:::
:::

::: question
3\. What would be the result of running this R code: `!TRUE`

::: choices
::: {.choice .correct-choice}
`FALSE`
:::

::: choice
`TRUE`
:::

::: choice
An error
:::

::: choice
Nothing
:::
:::
:::

<details>

<summary>Solutions</summary>

<p>

1.  `10 >= 10` is TRUE because 10 is equal to 10, and we are using the greater than or equal to operator, `>=`.
2.  `1 == 2` is the only expression that would give a result of `FALSE`. Be mindful that `1 = 10` is not a valid expression in R, and would give an error (since we need to use the double equal sign `==` for comparisons).
3.  `!TRUE` is `FALSE` because we are negating the value using  `!`.

</p>

</details>

:::

## Variables {#sec-variables}

-   what are variables

-   how to assign variables

-   how to see what is stored in a variable

-   about naming variables (case sensitive, no spaces, can't start with numbers)

A variable in R is an identifier to keep track of values. We assign values to variables so that we can refer to the variable later.

For example, I can do some maths:

```{r}
2 + 6 * 7^2
```

R outputs simply the result. To use this value later, I would need to assign the output to a variable.

You can this with `<-` (shortcut = `alt + -`) in R. (You can also use `=`, however, stylistically `<-` is preferred.)

Here R first performs the calculation on the right of `<-` and then saves the result as a variable called `my_num`.

```{r}
my_num <- 2 + 6 * 7^2
my_num # 296
```

Note that variable names are case sensitive.

```{r, error=TRUE}
var <- 10

VAR # produces error because VAR is not the same as var
```

You can also 'overwrite' variables by assigning to them again:

```{r}
my_num <- 3 * 4
my_num # 12
```

Because the right hand side is evaluated first, you can also assign to a variable a calculation that involves itself.

```{r}
my_num <- my_num + 5
my_num # 17
```

R has rules on valid variable names. Variable names can only contain letters, numbers, the dot or underline characters. They can only start with a letter or the dot followed by a letter.

If we try to create a variable that starts with a number, R will return an error:

```{r, error=TRUE}
2myvar <- 2 + 6 * 7^2 # not a valid name as it start with number
```

## Functions {#sec-functions}

-   introduce concept of functions

-   arguments (default + specifying them)

-   help page/pausing while writing arguments to get the help popup

Functions are expression in R that take inputs and produce outputs. Functions may take multiple inputs, also called 'arguments' to the function, each argument must be separated by comma. Arguments have a set order in which they can be given, or they can be referred to specifically by their name.

```{r}
pi
round(pi, digits = 3)
```

Many arguments have default values so you don't need to specify every argument for every function. You can check the arguments of a function by using `args()`.

```{r}
args(rnorm)
```

Sometimes it's obvious what the arguments are, but if more details are needed then you can access the help pages. This can be one in one of two ways, by searching for the function in the help panel.

Or using the command `?` followed by the name of the function:

```{r, eval=FALSE}
?sum
```

Help files are very useful but can be difficult to interpret at first due to the technical language used. It is often helpful to scroll down to the bottom to see examples of how the function is used.

## Data types {#sec-dataTypes}

-   \- numeric

    -   character

    -   logical

    -   mention there is another type: factors but we will cover that later

    -   class() function

Every variable in R has a 'type'. The type tells R what kind of data it is and consequently what it can and can't do with the data. For example, it makes sense to perform mathematical functions on numbers but not on words.

There are three basic types of data in R:

-   `logical` - either TRUE or FALSE
-   `numeric` - numbers
-   `character` - text surrounded by quotation marks

These are called 'atomic' data types as they are the most basic types of data from which other data types usually derive.

You can find the type of a variable using the `class()` function.

```{r, eval=FALSE}
1 # prints as 1
"1" # prints as "1"

class(TRUE) # logical
class(1) # numeric
class("hello") # character
class("TRUE") # character
class("123") # character
```

```{r, error=TRUE}
1 + 1 # works
"1" + "1" # produces error

!TRUE # works
!"TRUE" # produces error
```

## Data structures

intro the three kinds and their restrictions on data types

### Vectors {#sec-vectors}

-   making vectors with c()

-   seeing them in the environment panel

-   using head()

A vector is a collection of values of the same type. Values in a vector are laid out linearly, one after another.

You can create vectors with the `c()` function ('c' for 'combine'):

```{r}
my_vect1 <- c(1, 2, 3) # a vector of numbers
my_vect2 <- c("a", "vector", "of", "characters") # a vector of characters
```

One useful shorthand for creating a sequence of integers is `a:b` which creates a vector from a to b.

```{r}
1:10
3:7
```

For very long vectors, it is useful to use the head and tail functions to inspect just a few values. These print the first and last 6 elements of a vector.

```{r}
head(1:10000)
tail(1:10000)
```

### Matrices {#sec-matrices}

A matrix is the two-dimensional extension of the vector, it stores a collection of values of the same type but laid out in a grid with rows and columns. An example of this is a gene count matrices where each genes are represented by the rows, samples are represented by the columns and each cell represents a count for a particular gene in a particular column. The rows and columns can also be labelled with names, but these names are usually considered metadata rather than being a part of the matrix.

```{r}
gene_counts <- matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2)
rownames(gene_counts) <- c("gene1", "gene2")
colnames(gene_counts) <- c("sample1", "sample2")

class(gene_counts)
gene_counts
```

### Data frames

-   how to construct

-   looking at some pre-loaded data e.g. iris

-   viewing them with View() or by clicking on the environment panel

-   using \$ to access columns -\> these are vectors

Data frames are similar to matrices in that they store data in rows and columns. The difference is that the data within each column can be of different types. This is the representation used for general tables that record different attributes of individual entries along the rows.

A classic example of a data frame is the iris dataset.

```{r, eval=FALSE}
data(iris)

class(iris)
iris # prints the whole data frame and floods the screen
```

The `head()` and `tail()` functions also work here to print the first and last 6 rows of a data frame for a quick check of the data.

```{r}
head(iris)
tail(iris)
```

We can construct a data frame of our own as well using `data.frame()`

```{r}
my_df <- data.frame(
  mouse_id = c("mouse1", "mouse2", "mouse3"),
  age = c(48, 48, 52),
  weight = c(39.7, 42.2, 46.3)
)

class(my_df)
my_df
```

The general form for constructing a data frame looks like this

```
data.frame(col_name1 = values1, col_names2 = values2, ...)
```

Where each value is a vector of the same length.

You can access a column in a data frame with the shortcut `$`. Notice that the names of all columns of the data frame appears after typing in `my_df$`:

### Paths

-   <https://www.codecademy.com/resources/docs/general/file-paths>

-   folders are separated by / or \\ for windows

-   getting paths by copying them from the file explore panel in RStudio

### Reading in different types of data

-   read\_\* family of functions
-   reading data through the GUI in R (and the importance of copying the command when you do this)

Let's read in some data and start exploring it.

You should have received the data files via email before the course. Please download these files and make sure they are located in your working directory. Recall, we set our working directory above. You can find the location of your working directory with the function `getwd()`.

TODO: New link If you are following along outside of the WEHI course, you can download the data files from [Github](https://github.com/lucyleeow/BaseR_Intro/tree/master/data) - instructions for downloading data from GitHub can be found in the Preface.

The file we want to read in is named 'Ses1_genes.tsv'.

All the data files are in a directory called 'data' - thus the path to the file (relative to my working directory) is 'data/Ses1_genes.tsv'. Depending on where you have put your data (in your working directory or in another file in your working directory), the path to your file 'Ses1_genes.tsv' may be different.

```{r}
library(readr)
read_delim("data/Ses1_genes.tsv")
```

Note that `read.delim()` also lets you specify character that separates columns of the data. The most common types are comma-separated values (csv) and tab-separated values (tsv).

Example of a csv file:

```
Name, Age
Andy, 10
Bob, 8
```

Example of a tsv file:

```
Name  Age
Andy  10
Bob   8
```

By default `read_delim()` will guess your delimiter. We can see what happens if we use the wrong delimitor in our `read_delim()` call. There are also `read_tsv()` and `read_csv()` functions that have fixed delimiters and make your intent and assumptions more clear.

```{r}
read_delim("data/Ses1_genes.tsv", delim = ",")
```

If you just read in the data, R simply prints the values out in the console. Let's assign our data frame to a variable called `genes`:

```{r}
genes <- read_delim("data/Ses1_genes.tsv")
```

Notice how `genes` now appears in our 'Environment' tab:

All variables that we create will be shown in this tab, so it is a useful way to keep track of variables that we have created. Notice how R also tells us that there are 10 observations (rows) and 3 variables (columns) in the `genes` data frame.

## Summary

summarise the session here

can use for start of next session revision

### Practice questions

homework questions

can use in class to fill time if required