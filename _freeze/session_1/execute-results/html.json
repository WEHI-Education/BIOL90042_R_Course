{
  "hash": "45b9264401ac7db4bfa7f1fa89279926",
  "result": {
    "engine": "knitr",
    "markdown": "# Session 1: Introduction to R\n\n::: {.callout-tip title=\"Learning Objectives\"}\nAfter today's session, learners should be able to:\n\n1.  Use RStudio to create an R project and R script\n\n2.  Perform basic mathematical operations, comparisons and function calls in R\n\n3.  Store the results of analysis in variables\n\n4.  Describe the different data types and data structures used in R\n\n5.  Recall how to use RStudio to find data files and read them in as data frames\n:::\n\n## What is R?\n\nR is a free and open source statistical programming language, great for performing data analysis. RStudio is a free and open source R integrated development environment (IDE) which makes it easier for you to write code. It does this by providing you with auto-completion (of variable names, function names, file paths etc.), helping with formatting and keeping track of your variables.\n\nYou can think of R as the engine in a car and RStudio as the body & controls. R is doing all the calculations/computations but RStudio makes it easier for you to use R.\n\nWhen you first open RStudio, there will be three panels - see Figure \\@ref(fig:RS1) (don't worry if your RStudio does not have the same colours/appearance - different versions of RStudio look slightly different, and the colour here is not the default one.)\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Three panels in RStudio.](Images/RS1.png){width=700px}\n:::\n:::\n\n\n-   Left panel: this panel features two tabs, 'Console', which is where you can type in commands for R to run and 'Terminal', which we won't worry about in this course.\n-   Top right panel:\n    -   Environment - in this tab you can see all variables you have created.\n    -   History - R keeps track of all commands you have run and you can review them in this tab.\n    -   Connections - this tab helps you connect to data sources but we will not be using it in this course.\n-   Bottom right:\n    -   Files - you can explore your file directory here and we will use it to set our working directory later.\n    -   Plots - plots that you create will either appear here or be saved to a file.\n    -   Help - help files for R functions can be viewed in this tab. Help files tell you about what a function does and how to use it.\n    -   Packages - basic R includes many useful functions. You can add even more functions by downloading packages. A package is a collection of functions, generally with a certain data analysis theme. For example, the package 'limma', which we will use later, includes functions for analysing RNA-sequencing data.\n    -   Viewer - this tab lets you view local web content but we won't be using it in this course.\n\n## R scripts\n\nTo open an R script, go to File \\> New File \\> R Script.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Opening a new R Script.](Images/RS2.png){width=700px}\n:::\n:::\n\n\nThis will open a fourth panel on the top left.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Four panels, including a R Script.](Images/RS3.png){width=700px}\n:::\n:::\n\n\nAn R script is a text document where can type and run commands. You can also run commands in the console but the code run in the console is not saved. Note that to run a command in the Console press `Enter` key but to run a command in a R Script you must press `Cmd/Ctrl + Enter` keys.\n\nLastly, you add 'comments' in your R Script. Comments are notes regarding the code that are not interpreted by R, they begin with `#`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# this is a note to myself\n1 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n## Working directory\n\nEvery file on your computer is located in a specific location. This location can be referred to by a path. In Mac, paths look something like this: `/Users/MyName/Documents/`. In Windows, paths look something like this: `C:\\Users\\MyName\\Documents\\`.\n\nWhen you open an R session, it launches from a specific location. You can find out where this is using the command `getwd()`. This location is called the 'working directory'. By default, R will look in this directory when reading in data and write out files/plots to this directory. It is often useful to have your data and R Scripts in the same directory and set this as your working directory.\n\nYou can set your working directory to be anywhere you like and we will now do this:\n\n1.  Make a folder for this course, somewhere sensible on your computer that you will be able to easily find.\n2.  Go back to your RStudio window, go to the bottom right panel, click on the 'Files' tab and then click on the three dots on the top right hand corner (Figure \\@ref(fig:wd1)).\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Setting the working directory - 1.](Images/wd1.png){fig-align='center' width=500px}\n:::\n:::\n\n\n3.  This will open up a new window (Figure \\@ref(fig:wd2)) which lets you explore the files and folders on your computer. Find the new folder you created, click on it then click 'Open'.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Setting the working directory - 2.](Images/wd2.png){fig-align='center' width=500px}\n:::\n:::\n\n\n4.  The files tab will now show the contents of your new folder (which should be empty). At the top of the files tab, click on More \\> Set As Working Directory (Figure \\@ref(fig:wd3)).\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Setting the working directory - 3.](Images/wd3.png){fig-align='center' width=500px}\n:::\n:::\n\n\nPlease set your working directory to be this folder at the start of EVERY session.\n\n## Maths\n\nR performs maths and follows standard order of operations. In order of highest to lowest precedence, here is how mathematical operations are denoted in R:\n\n-   `()` - parentheses\n-   `^` or `**` - exponents\n-   `/` - divide\n-   `*` - multiply\n-   `+` - add\n-   `-` - subtract\n-   `%%` - remainder (modulus)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\n1 + 3 * 4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 13\n```\n\n\n:::\n\n```{.r .cell-code}\n(1 + 3) * 4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 16\n```\n\n\n:::\n\n```{.r .cell-code}\n10 %% 3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n\n## Comparisons\n\nR can perform comparisons:\n\n-   `==` equal to.\n-   `!=` not equal to.\n-   `>` greater than.\n-   `>=` greater or equal to.\n-   `<` less than.\n-   `<=` less than or equal to.\n\nThese operations return a `TRUE` or a `FALSE` value. This can be used to quickly summarise data or perform indexing as we will see later.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n10 > 10 # FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n10 >= 10 # TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\nYou can also compare words. R will use dictionary order to determine which word is 'greater'.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"cat\" > \"dog\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\nYou can also negate the result of a comparison or any TRUE/FALSE value by using the `!` operator before the expression.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n!(\"cat\" > \"dog\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n!(1 == 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n## Variables\n\n## Using RStudio\n\n-   intro the panels, make a project\n\n-   make an rscript & save it\n\n-   write a comment for the title\n\n## Maths\n\n-   plus, minus, division and multiplication\n\n-   brackets for order of operations\n\n-   explain we can ignore the \\[1\\] next to output for now\n\n## Comparisons\n\n-   \\>= \\<= \\< \\> == !=\n\nA variable in R is an identifier to keep track of values. We assign values to variables so that we can refer to the variable later.\n\nFor example, I can do some maths:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 + 6 * 7^2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 296\n```\n\n\n:::\n:::\n\n\nR outputs simply the result. To use this value later, I would need to assign the output to a variable.\n\nYou can this with `<-` (shortcut = `alt + -`) in R. (You can also use `=`, however, stylistically `<-` is preferred.)\n\nHere R first performs the calculation on the right of `<-` and then saves the result as a variable called `my_num`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_num <- 2 + 6 * 7^2\nmy_num # 296\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 296\n```\n\n\n:::\n:::\n\n\nNote that variable names are case sensitive.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvar <- 10\n\nVAR # produces error because VAR is not the same as var\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'VAR' not found\n```\n\n\n:::\n:::\n\n\nYou can also 'overwrite' variables by assigning to them again:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_num <- 3 * 4\nmy_num # 12\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 12\n```\n\n\n:::\n:::\n\n\nBecause the right hand side is evaluated first, you can also assign to a variable a calculation that involves itself.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_num <- my_num + 5\nmy_num # 17\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 17\n```\n\n\n:::\n:::\n\n\nR has rules on valid variable names. Variable names can only contain letters, numbers, the dot or underline characters. They can only start with a letter or the dot followed by a letter.\n\nIf we try to create a variable that starts with a number, R will return an error:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2myvar <- 2 + 6 * 7^2 # not a valid name as it start with number\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:1:2: unexpected symbol\n1: 2myvar\n     ^\n```\n\n\n:::\n:::\n\n\n## Functions\n\nFunctions are expression in R that take inputs and produce outputs. Functions may take multiple inputs, also called 'arguments' to the function, each argument must be separated by comma. Arguments have a set order in which they can be given, or they can be referred to specifically by their name.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npi\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.141593\n```\n\n\n:::\n\n```{.r .cell-code}\nround(pi, digits = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.142\n```\n\n\n:::\n:::\n\n\nMany arguments have default values so you don't need to specify every argument for every function. You can check the arguments of a function by using `args()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nargs(rnorm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfunction (n, mean = 0, sd = 1) \nNULL\n```\n\n\n:::\n:::\n\n\nSometimes it's obvious what the arguments are, but if more details are needed then you can access the help pages. This can be one in one of two ways, by searching for the function in the help panel.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Accessing help files via 'help' tab.](Images/help.png){fig-align='center' width=500px}\n:::\n:::\n\n\nOr using the command `?` followed by the name of the function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?sum\n```\n:::\n\n\nHelp files are very useful but can be difficult to interpret at first due to the technical language used. It is often helpful to scroll down to the bottom to see examples of how the function is used.\n\n## Data types\n\nEvery variable in R has a 'type'. The type tells R what kind of data it is and consequently what it can and can't do with the data. For example, it makes sense to perform mathematical functions on numbers but not on words.\n\nThere are three basic types of data in R:\n\n-   `logical` - either TRUE or FALSE\n-   `numeric` - numbers\n-   `character` - text surrounded by quotation marks\n\nThese are called 'atomic' data types as they are the most basic types of data from which other data types usually derive.\n\nYou can find the type of a variable using the `class()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 # prints as 1\n\"1\" # prints as \"1\"\n\nclass(TRUE) # logical\nclass(1) # numeric\nclass(\"hello\") # character\nclass(\"TRUE\") # character\nclass(\"123\") # character\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + 1 # works\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n\n```{.r .cell-code}\n\"1\" + \"1\" # produces error\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in \"1\" + \"1\": non-numeric argument to binary operator\n```\n\n\n:::\n\n```{.r .cell-code}\n!TRUE # works\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n!\"TRUE\" # produces error\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in !\"TRUE\": invalid argument type\n```\n\n\n:::\n:::\n\n\n### Vectors\n\nA vector is a collection of values of the same type. Values in a vector are laid out linearly, one after another.\n\nYou can create vectors with the `c()` function ('c' for 'combine'):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_vect1 <- c(1, 2, 3) # a vector of numbers\nmy_vect2 <- c(\"a\", \"vector\", \"of\", \"characters\") # a vector of characters\n```\n:::\n\n\nOne useful shorthand for creating a sequence of integers is `a:b` which creates a vector from a to b.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1:10\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n\n\n:::\n\n```{.r .cell-code}\n3:7\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3 4 5 6 7\n```\n\n\n:::\n:::\n\n\nFor very long vectors, it is useful to use the head and tail functions to inspect just a few values. These print the first and last 6 elements of a vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(1:10000)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5 6\n```\n\n\n:::\n\n```{.r .cell-code}\ntail(1:10000)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  9995  9996  9997  9998  9999 10000\n```\n\n\n:::\n:::\n\n\n### Matrices\n\nA matrix is the two-dimensional extension of the vector, it stores a collection of values of the same type but laid out in a grid with rows and columns. An example of this is a gene count matrices where each genes are represented by the rows, samples are represented by the columns and each cell represents a count for a particular gene in a particular column. The rows and columns can also be labelled with names, but these names are usually considered metadata rather than being a part of the matrix.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngene_counts <- matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2)\nrownames(gene_counts) <- c(\"gene1\", \"gene2\")\ncolnames(gene_counts) <- c(\"sample1\", \"sample2\")\n\nclass(gene_counts)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"matrix\" \"array\" \n```\n\n\n:::\n\n```{.r .cell-code}\ngene_counts\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      sample1 sample2\ngene1       1       3\ngene2       2       4\n```\n\n\n:::\n:::\n\n\nTODO: Replace data.frames with tibbles <!-- ### Data frames\n-   introduce concept of functions\n\n-   arguments (default + specifying them)\n\n-   help page/pausing while writing arguments to get the help popup\n\n## Variables\n\n-   what are variables\n\n-   how to assign variables\n\n-   how to see what is stored in a variable\n\n-   about naming variables (case sensitive, no spaces, can't start with numbers)\n\n## Data types\n\n-   numeric\n\n-   character\n\n-   logical\n\n-   mention there is another type: factors but we will cover that later\n\n-   class() function -->\n\nData frames are similar to matrices in that they store data in rows and columns. The difference is that the data within each column can be of different types. This is the representation used for general tables that record different attributes of individual entries along the rows.\n\nA classic example of a data frame is the iris dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(iris)\n\nclass(iris)\niris # prints the whole data frame and floods the screen\n```\n:::\n\n\nThe `head()` and `tail()` functions also work here to print the first and last 6 rows of a data frame for a quick check of the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n```\n\n\n:::\n\n```{.r .cell-code}\ntail(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n145          6.7         3.3          5.7         2.5 virginica\n146          6.7         3.0          5.2         2.3 virginica\n147          6.3         2.5          5.0         1.9 virginica\n148          6.5         3.0          5.2         2.0 virginica\n149          6.2         3.4          5.4         2.3 virginica\n150          5.9         3.0          5.1         1.8 virginica\n```\n\n\n:::\n:::\n\n\nWe can construct a data frame of our own as well using `data.frame()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_df <- data.frame(\n  mouse_id = c(\"mouse1\", \"mouse2\", \"mouse3\"),\n  age = c(48, 48, 52),\n  weight = c(39.7, 42.2, 46.3)\n)\n\nclass(my_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"data.frame\"\n```\n\n\n:::\n\n```{.r .cell-code}\nmy_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  mouse_id age weight\n1   mouse1  48   39.7\n2   mouse2  48   42.2\n3   mouse3  52   46.3\n```\n\n\n:::\n:::\n\n\nThe general form for constructing a data frame looks like this\n\n```\ndata.frame(col_name1 = values1, col_names2 = values2, ...)\n```\n\nWhere each value is a vector of the same length.\n\nYou can access a column in a data frame with the shortcut `$`. Notice that the names of all columns of the data frame appears after typing in `my_df$`:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Accessing columns in a dataframe using the '$' symbol.](Images/df_dollar.png){fig-align='center' width=350px}\n:::\n:::\n\n\n## Data structures\n\nintro the three kinds and their restrictions on data types\n\n### Vectors\n\n-   making vectors with c()\n\n-   seeing them in the environment panel\n\n-   using head()\n\n### Matrices\n\n-   how to construct\n\n### Data frames\n\n-   how to construct\n\n-   looking at some pre-loaded data e.g. iris\n\n-   viewing them with View() or by clicking on the environment panel\n\n-   using \\$ to access columns -\\> these are vectors\n\n## Data import\n\nLet's read in some data and start exploring it.\n\nYou should have received the data files via email before the course. Please download these files and make sure they are located in your working directory. Recall, we set our working directory above. You can find the location of your working directory with the function `getwd()`.\n\nTODO: New link If you are following along outside of the WEHI course, you can download the data files from [Github](https://github.com/lucyleeow/BaseR_Intro/tree/master/data) - instructions for downloading data from GitHub can be found in the Preface.\n\nThe file we want to read in is named 'Ses1_genes.tsv'.\n\nAll the data files are in a directory called 'data' - thus the path to the file (relative to my working directory) is 'data/Ses1_genes.tsv'. Depending on where you have put your data (in your working directory or in another file in your working directory), the path to your file 'Ses1_genes.tsv' may be different.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nread_delim(\"data/Ses1_genes.tsv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 10 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): SYMBOL\ndbl (2): GeneLength, Count\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 3\n   SYMBOL  GeneLength Count\n   <chr>        <dbl> <dbl>\n 1 Gm10568       1634     0\n 2 Gm19860        799     4\n 3 Gm19938       3259     0\n 4 Lypla1        2433   768\n 5 Rp1           9747     0\n 6 Sox17         3130     1\n 7 Tcea1         2847   810\n 8 Mrpl15        4203   431\n 9 Xkr4          3634     1\n10 Rgs20         2241   452\n```\n\n\n:::\n:::\n\n\nNote that `read.delim()` also lets you specify character that separates columns of the data. The most common types are comma-separated values (csv) and tab-separated values (tsv).\n\nExample of a csv file:\n\n```\nName, Age\nAndy, 10\nBob, 8\n```\n\nExample of a tsv file:\n\n```\nName  Age\nAndy  10\nBob   8\n```\n\nBy default `read_delim()` will guess your delimiter. We can see what happens if we use the wrong delimitor in our `read_delim()` call. There are also `read_tsv()` and `read_csv()` functions that have fixed delimiters and make your intent and assumptions more clear.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_delim(\"data/Ses1_genes.tsv\", delim = \",\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 10 Columns: 1\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): SYMBOL\tGeneLength\tCount\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 1\n   `SYMBOL\\tGeneLength\\tCount`\n   <chr>                      \n 1 \"Gm10568\\t1634\\t0\"         \n 2 \"Gm19860\\t799\\t4\"          \n 3 \"Gm19938\\t3259\\t0\"         \n 4 \"Lypla1\\t2433\\t768\"        \n 5 \"Rp1\\t9747\\t0\"             \n 6 \"Sox17\\t3130\\t1\"           \n 7 \"Tcea1\\t2847\\t810\"         \n 8 \"Mrpl15\\t4203\\t431\"        \n 9 \"Xkr4\\t3634\\t1\"            \n10 \"Rgs20\\t2241\\t452\"         \n```\n\n\n:::\n:::\n\n\nIf you just read in the data, R simply prints the values out in the console. Let's assign our data frame to a variable called `genes`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngenes <- read_delim(\"data/Ses1_genes.tsv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 10 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): SYMBOL\ndbl (2): GeneLength, Count\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\nNotice how `genes` now appears in our 'Environment' tab:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Variable in 'Environment' tab.](Images/import.png){fig-align='center' width=500px}\n:::\n:::\n\n\nAll variables that we create will be shown in this tab, so it is a useful way to keep track of variables that we have created. Notice how R also tells us that there are 10 observations (rows) and 3 variables (columns) in the `genes` data frame.\n\n### Writing out data\n\nTODO: Writing out to tsv, csv, excel (?)\n\n### Paths\n\n-   <https://www.codecademy.com/resources/docs/general/file-paths>\n\n-   folders are separated by / or \\\\ for windows\n\n-   getting paths by copying them from the file explore panel in RStudio\n\n### Reading in different types of data\n\n-   read\\_\\* family of functions\n-   reading data through the GUI in R (and the importance of copying the command when you do this)\n\n## Summary\n\nsummarise the session here\n\ncan use for start of next session revision\n\n### Practice questions\n\nhomework questions\n\ncan use in class to fill time if required",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}