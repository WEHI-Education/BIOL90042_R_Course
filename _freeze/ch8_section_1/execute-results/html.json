{
  "hash": "11c7a09e2caa262a9ef83ddf3459012c",
  "result": {
    "engine": "knitr",
    "markdown": "---\nfilters:\n  - naquiz\nformat:\n  html:\n    toc: true\n    toc-location: left\n    toc-title: \"In this section:\"\n---\n\n\n\n\n\n# Part 1 {.unnumbered #sec-mlpart01} \n\n## Setup\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(broom)\nlibrary(ggridges)\n\nlibrary(tidyrstats)\n\ntheme_set(theme_minimal())\n```\n:::\n\n\n\n\n\n## Read data\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntumor_data <- readxl::read_xlsx('data/tumor_data.xlsx')\n\ntumor_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 300 × 42\n   donorid status    cell_size cell_density nuclear_area membrane_curvature\n   <chr>   <chr>         <dbl>        <dbl>        <dbl>              <dbl>\n 1 d001    malignant     0.170        0.654        0.877              2.50 \n 2 d002    malignant     2.95         1.42         0.677              4.78 \n 3 d003    malignant     4.79         4.66         0.593              6.96 \n 4 d004    benign        4.67         1.74         0.423              0.928\n 5 d005    malignant    13.0          0.887        0.489              3.01 \n 6 d006    benign        3.78         1.02         0.486              0.580\n 7 d007    malignant     0.663        8.53         1.03               2.17 \n 8 d008    benign        0.950        1.09         0.581              5.10 \n 9 d009    malignant     8.39         3.64         0.955              8.78 \n10 d010    benign        9.82         7.39         0.403             15.3  \n# ℹ 290 more rows\n# ℹ 36 more variables: granularity <dbl>, border_diffuseness <dbl>,\n#   vascular_density <dbl>, necrosis_extent <dbl>, stromal_thickness <dbl>,\n#   mitotic_count <dbl>, texture_1 <dbl>, texture_2 <dbl>, texture_3 <dbl>,\n#   texture_4 <dbl>, texture_5 <dbl>, texture_6 <dbl>, texture_7 <dbl>,\n#   texture_8 <dbl>, texture_9 <dbl>, texture_10 <dbl>, intensity_1 <dbl>,\n#   intensity_2 <dbl>, intensity_3 <dbl>, intensity_4 <dbl>, …\n```\n\n\n:::\n:::\n\n\n\n\n\n\nThe data contains 300 tissue samples which have been imaged in a histology lab, as referenced in this chapter [Background](chapter_8.qmd). Each sample has the anonymized donor id and malignancy status determined by a trained pathologist (benign or malignant).\n\nAutomatic quantification of image features produces 40 'features' including cell shapes, edge (plasma membrane) definition, cytosolic texture, staining intensity, necrosis, vascularity etc.\n\n## Explore the data\n\n### Reshape for plotting\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_long <- tumor_data |> \n  pivot_longer(names_to = \"key\", values_to = \"value\", \n               cols = -c(donorid, status))\n```\n:::\n\n\n\n\n\n### Check distributions\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_long |>   ggplot(aes(x=value,group=key)) + geom_density()\n```\n\n::: {.cell-output-display}\n![](ch8_section_1_files/figure-html/unnamed-chunk-4-1.png){width=2000}\n:::\n:::\n\n\n\n\n\nThe data doesnt look normally distributed, but there is a big over-plotting problem here. Let's use the ggridges package to produce a single density plot for each feature:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_long |>  ggplot(aes(x=value)) + \n  geom_density_ridges(aes(y=key))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPicking joint bandwidth of 0.646\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](ch8_section_1_files/figure-html/unnamed-chunk-5-1.png){width=2000}\n:::\n:::\n\n\n\n\n\nThe measurements in the dataset have a positive skew, meaning they are non-normal. For best results in machine learning (and data analysis more generally) its usually best to transform the data into a normal distribution where possible.\n\n### Log transform\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_long_log <- dat_long |>\n  mutate(value=log10(value))\n```\n:::\n\n\n\n\n\nPlot transformed data\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_long_log |>  ggplot(aes(x=value)) + \n  geom_density_ridges(aes(y=key))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPicking joint bandwidth of 0.0993\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](ch8_section_1_files/figure-html/unnamed-chunk-7-1.png){width=2000}\n:::\n:::\n\n\n\n\n\nThe data looks more normal now. Note that the mean values are different. This can be addressed by scaling data, which we return to later.\n\n### Cluster analysis\n\nLet's run an unsupervised machine learning method to explore how the samples group together using a 'data-driven' approach. `pr_comp()` gives us principal components analysis, and requires wide-format data.\n\nReshape log-transformed data to wide format, and calculate principal components using the quantitative features (i.e., everything except donorid and malignancy status).\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_wide_log <- dat_long_log |> \n  pivot_wider(names_from = \"key\", values_from=\"value\") \n  \npc_dat <- dat_wide_log |> select(-c(donorid,status)) |> \n        #principal components function\n  prcomp()\n```\n:::\n\n\n\n\n\nWe can access the principal components for each sample by using the `broom::augment()` function. The primary PCs (e.g. 1 thru 5) encode the majority of the variation between samples. As such we focus on primary PCs (or dimension in MDS), when clustering samples\n\nPlot first 2 PCs, coloured by tumor status\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npcs_fitted <- pc_dat |> augment() \n  \n#Join the sample labels to the fitted PCs\npc_plot_dat <- bind_cols(tumor_data |> select(status), \n                         pcs_fitted) \n\n#Scatter plot\npc_plot_dat |> \n  ggplot(aes(.fittedPC1, .fittedPC2)) + \n  geom_point(aes(col=status), size=2)\n```\n\n::: {.cell-output-display}\n![](ch8_section_1_files/figure-html/unnamed-chunk-9-1.png){width=2000}\n:::\n:::\n\n\n\n\n\nThere is certainly not a clear separation between malignant and benign. This indicates we will need to try a more sensitive/advanced method to reliably predict the tissue status.\n\n### Linear model\n\nLets try one of the simplest ML engines - the linear model, to see whether any of the imaging features are significantly associated with tissue status.\n\nIf we define a model where imaging feature is the *outcome* (y) and tumor status is the *predictor* (x) we can test for associations quite easily, using `lm_test()`.\n\nOur experimental question is 'Are any features (y) significantly different between benign (x = 0 ) and malignant (x=1)?'\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#marginal effects\ndat_long_log |> group_by(key) |> \n  lm_test( value ~  status  ) |> filter(term!='intercept') \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nResults for linear model: value ~ status\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 40 × 6\n   key                term            estimate std.error statistic       p.value\n   <chr>              <chr>              <dbl>     <dbl>     <dbl>         <dbl>\n 1 granularity        statusmalignant   0.280     0.0446      6.28 0.00000000121\n 2 intensity_8        statusmalignant   0.146     0.0240      6.10 0.00000000325\n 3 membrane_curvature statusmalignant   0.228     0.0481      4.75 0.00000317   \n 4 shape_metric_4     statusmalignant  -0.229     0.0486     -4.72 0.00000361   \n 5 vascular_density   statusmalignant   0.108     0.0244      4.43 0.0000133    \n 6 stromal_thickness  statusmalignant   0.172     0.0470      3.65 0.000305     \n 7 intensity_5        statusmalignant   0.0773    0.0247      3.13 0.00193      \n 8 intensity_4        statusmalignant   0.0691    0.0274      2.52 0.0123       \n 9 texture_2          statusmalignant  -0.0657    0.0350     -1.88 0.0617       \n10 texture_10         statusmalignant  -0.0791    0.0452     -1.75 0.0811       \n# ℹ 30 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\nWe can see several features do have significant associations with tissue status! This means that, although those feature associations are not large/strong enough to drive sample separation in PCA, the should be able to be combined to build a good predictive model.\n\n### Confirm LM results graphically\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#features_of_interest (FOI)\nfoi <- c('granularity','intensity_8','membrane_curvature')\n\ndat_long_log |> \n  filter(key %in% foi) |> \n  ggplot(aes(x=status , y=value)) + geom_boxplot() +\n  geom_jitter(aes(group=status), width=0.2,size=0.5) +\n  facet_wrap(~key)\n```\n\n::: {.cell-output-display}\n![](ch8_section_1_files/figure-html/unnamed-chunk-11-1.png){width=2000}\n:::\n:::\n\n\n\n\n\n## Save output\n\nFor the next steps, we will save the log-transformed, wide-format data (used for the PC analysis).\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwritexl::write_xlsx(dat_wide_log,\n                    'data_processed/tumor_data_log_wide.xlsx')\n```\n:::\n",
    "supporting": [
      "ch8_section_1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}